// BSLLS-off
// @strict-types

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
    
    ВариантыПолученияДанныхОчереди = ЮТест.Варианты("ПредставлениеТеста, СписокПолей")
    .Добавить(
    "Одно поле",
    "ПотокДанных")
    .Добавить(
    "Несколько полей",
    "ВходящееСообщение,ПотокДанных")
    .Добавить(
    "Несколько полей с пробелами",
    "ВходящееСообщение, ПотокДанных")
    .Добавить(
    "Получение сообщения из хз",
    "ВходящееСообщение")
    .Добавить(
    "Пустая строка",
    "");
    
    Тесты = ЮТТесты.УдалениеТестовыхДанных().ВТранзакции()
    .ДобавитьТест("РегистрацияСообщенияВОчередь")
    .Представление("Идентификатор заполнен", Истина)
    .СПараметрами(Новый УникальныйИдентификатор)
    .ДобавитьТест("РегистрацияСообщенияВОчередь")
    .Представление("Идентификатор не заполнен", Истина)
    .СПараметрами(Неопределено)
    .ДобавитьТест("ИсходящийПотокНеПопадаетВОчередь")
    .ДобавитьТест("НеактивныйПотокНеПопадаетВОчередь")
    .ДобавитьТест("ФормированиеСообщенияПоПотоку");
    Для Каждого Вариант Из ВариантыПолученияДанныхОчереди.СписокВариантов() Цикл
        Тесты.ДобавитьТест("ПолучениеДанныхОчередиПоИдентификатору")
        .Представление(Вариант.ПредставлениеТеста, Истина)
        .СПараметрами(Вариант.СписокПолей);
        
    КонецЦикла;
    
КонецПроцедуры

#Область События

Процедура ПередВсемиТестами() Экспорт

КонецПроцедуры

Процедура ПередКаждымТестом() Экспорт

КонецПроцедуры

Процедура ПослеКаждогоТеста() Экспорт

КонецПроцедуры

Процедура ПослеВсехТестов() Экспорт

КонецПроцедуры

#КонецОбласти

Процедура РегистрацияСообщенияВОчередь(ИдентификаторСообщения) Экспорт
    ПотокДанных = ГенераторТестовыхДанных.ПотокДанныхВходящий();
    ДанныеСообщения = Новый Структура("Hello", "world");
    ИдентификаторСообщения = РегистрыСведений.инт_ОчередьВходящихСообщений.ЗарегистрироватьСообщение(ДанныеСообщения, ПотокДанных, ИдентификаторСообщения);
    
    ЮТест.ОжидаетЧто(ИдентификаторСообщения).НеРавно(Неопределено);
    
    УсловиеПоискаЗаписи = ЮТест.Предикат() // В базе есть записаное сообщение в очереди со статусом "Новый"
            .Реквизит("ИдентификаторСообщения").Равно(ИдентификаторСообщения);

    ЮТест.ОжидаетЧтоТаблицаБазы("РегистрСведений.инт_ОчередьВходящихСообщений")
        .СодержитЗаписи(УсловиеПоискаЗаписи);
        
    ЗаписьСообщения = ЮТЗапросы.Запись("РегистрСведений.инт_ОчередьВходящихСообщений", УсловиеПоискаЗаписи);
    ЮТест.ОжидаетЧто(ЗаписьСообщения, "Запись сообщения")
        .Заполнено()
            .Свойство("ВходящееСообщение").Заполнено()
            .Свойство("ПотокДанных").Заполнено().Равно(ПотокДанных);

    ЮТест.ОжидаетЧтоТаблицаБазы("РегистрСведений.инт_ТекущийСтатусВходящихСообщений")
        .СодержитЗаписи(УсловиеПоискаЗаписи);
        
    ЗаписьСтатуса = ЮТЗапросы.Запись("РегистрСведений.инт_ТекущийСтатусВходящихСообщений", УсловиеПоискаЗаписи);
    ЮТест.ОжидаетЧто(ЗаписьСтатуса, "Запись статуса")
        .Заполнено()
            .Свойство("СтатусСообщения").Заполнено().Равно(Перечисления.инт_СтатусыВходящихСообщений.Новый);
    
КонецПроцедуры

Процедура ИсходящийПотокНеПопадаетВОчередь() Экспорт
	ДанныеСообщения = Новый Структура("Hello", "world");
    ПотокДанных = ГенераторТестовыхДанных.ПотокДанныхИсходящий();
    
    ЮТест.ОжидаетЧто(РегистрыСведений.инт_ОчередьВходящихСообщений)
        .Метод("ЗарегистрироватьСообщение")
        .Параметр(ДанныеСообщения)
        .Параметр(ПотокДанных)
         .ВыбрасываетИсключение("Нельзя регистрировать в очереди входящих сообщений исходящие потоки!");
КонецПроцедуры
    
Процедура НеактивныйПотокНеПопадаетВОчередь() Экспорт
    ДанныеСообщения = Новый Структура("Hello", "world");
    ПотокДанных = ГенераторТестовыхДанных.ПотокДанныхВходящий(Ложь);
    
    ЮТест.ОжидаетЧто(РегистрыСведений.инт_ОчередьВходящихСообщений)
        .Метод("ЗарегистрироватьСообщение")
        .Параметр(ДанныеСообщения)
        .Параметр(ПотокДанных)
        .ВыбрасываетИсключение("Поток помечен как не активный!");
КонецПроцедуры
    
Процедура ФормированиеСообщенияПоПотоку() Экспорт
	ДанныеСообщения = Новый Структура("Hello", "world");
    ПотокДанных = ГенераторТестовыхДанных.ПотокДанныхВходящий();
    // Проверка регистрации выполняется другим тестом.
    ИдентификаторСообщения = РегистрыСведений.инт_ОчередьВходящихСообщений.ЗарегистрироватьСообщение(ДанныеСообщения, ПотокДанных);
    
    ЮТест.ОжидаетЧто(ИдентификаторСообщения).НеРавно(Неопределено);
    
    Мокито.Обучение(РегистрыСведений.инт_ОчередьВходящихСообщений)
            .Когда("ПолучитьДанныеОчередиПоИдентификатору").Вернуть(Новый Структура("ВходящееСообщение,ПотокДанных", Неопределено, ПотокДанных))
            .Обучение(Справочники.инт_ПотокиДанных, Истина)
            .Когда("ОбработатьВходящееСообщениеПоПотоку").Пропустить()
                .Прогон();
    
    РегистрыСведений.инт_ОчередьВходящихСообщений.ОбработатьСообщениеПоИдентификатору(ИдентификаторСообщения);

    УсловиеПоискаЗаписи = ЮТест.Предикат()
            .Реквизит("ИдентификаторСообщения").Равно(ИдентификаторСообщения);
            
   ЮТест.ОжидаетЧтоТаблицаБазы("РегистрСведений.инт_ТекущийСтатусВходящихСообщений")
        .СодержитЗаписи(УсловиеПоискаЗаписи);
        
    ЗаписьСтатуса = ЮТЗапросы.Запись("РегистрСведений.инт_ТекущийСтатусВходящихСообщений", УсловиеПоискаЗаписи);
    ЮТест.ОжидаетЧто(ЗаписьСтатуса, "Запись Статуса")
        .Заполнено()
            .Свойство("СтатусСообщения").Заполнено().Равно(Перечисления.инт_СтатусыВходящихСообщений.Обработан);

КонецПроцедуры
        
Процедура ПолучениеДанныхОчередиПоИдентификатору(СписокПолей) Экспорт
    
    ИсходныеДанные = ГенераторТестовыхДанных.демо_Документ();
    ПотокДанных = ГенераторТестовыхДанных.ПотокДанныхВходящий();
    
    // Проверка регистрации выполняется другим тестом.
    ИдентификаторСообщения = РегистрыСведений.инт_ОчередьВходящихСообщений.ЗарегистрироватьСообщение(ИсходныеДанные, ПотокДанных);
    МассивПолей = СтрРазделить(СписокПолей,",",Ложь);
    Если МассивПолей.Количество()=0 Тогда
        ЮТест.ОжидаетЧто(РегистрыСведений.инт_ОчередьВходящихСообщений)
            .Метод("ПолучитьДанныеОчередиПоИдентификатору")
            .Параметр(ИдентификаторСообщения)
            .Параметр(СписокПолей)
            .ВыбрасываетИсключение("Список полей - не может быть пустым!");
    Иначе
        СтруктураРезультат = РегистрыСведений.инт_ОчередьВходящихСообщений.ПолучитьДанныеОчередиПоИдентификатору(ИдентификаторСообщения, СписокПолей);
        
        Для Каждого Поле Из МассивПолей Цикл
            ЮТест.ОжидаетЧто(СтруктураРезультат)
            .Свойство(СокрЛП(Поле));
            
            Если Поле="СформированноеСообщение" Тогда
                ЮТест.ОжидаетЧто(СтруктураРезультат)
                .Свойство(СокрЛП(Поле)).НеИмеетТип(Тип("ХранилищеЗначения"));
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
