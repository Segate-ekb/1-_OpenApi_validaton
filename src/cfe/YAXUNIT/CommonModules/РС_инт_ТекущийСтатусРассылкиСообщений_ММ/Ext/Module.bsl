// BSLLS-off
// BSLLS-off
// @strict-types

/////////////////////////////////////////////////////////////////////////////////
// Экспортные процедуры и функции, предназначенные для использования другими 
// объектами конфигурации или другими программами
///////////////////////////////////////////////////////////////////////////////// 

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИсполняемыеСценарии() Экспорт
	
	ЮТТесты.УдалениеТестовыхДанных().ВТранзакции()
	.ДобавитьТест("ЗаписьНеОшибочногоСтатусаСообщения")
	.ДобавитьТест("ЗаписьОшибочногоСтатусаСообщения")
	.ДобавитьТест("ПроверкаРаботыПопытокОтправки")
	.ДобавитьТест("ЗаписьМассиваСообщений")
	.ДобавитьТест("ПроверитьРаботуФункцииТекущийСтатусСообщения")
	.ДобавитьТест("ПроверитьПолучениеСообщенийКОтправке")
	.ДобавитьТест("ПроверитьРаботуПаузыМеждуОтправками");
	
КонецПроцедуры

#Область События

Процедура ПередВсемиТестами() Экспорт
КонецПроцедуры

Процедура ПередКаждымТестом() Экспорт
	
КонецПроцедуры

Процедура ПослеКаждогоТеста() Экспорт
	
КонецПроцедуры

Процедура ПослеВсехТестов() Экспорт
	
КонецПроцедуры

#КонецОбласти

Процедура ЗаписьНеОшибочногоСтатусаСообщения() Экспорт
	Мокито.Обучение(РегистрыСведений.инт_СообщенияКУдалению)
	.Когда("ЗарегистрироватьСообщениеКУдалению").Пропустить()
	.Прогон();
	
	ИдентификаторСообщения = Новый УникальныйИдентификатор;
	Подписчик = ГенераторТестовыхДанных.Подписчик();
	Статус = ГенераторТестовыхДанных.НеОшибочныйСтатусРассылкиСообщений();
	РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения,Подписчик, Перечисления.инт_СтатусыРассылкиИсходящихСообщений.Новый);
	РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Подписчик, Статус);
	УсловиеПоискаЗаписи = ЮТест.Предикат() // В базе есть записаный статус
	.Реквизит("Подписчик").Равно(Подписчик)
	.Реквизит("ИдентификаторСообщения").Равно(ИдентификаторСообщения);
	
	ЮТест.ОжидаетЧтоТаблицаБазы("РегистрСведений.инт_ТекущийСтатусРассылкиСообщений")
	.СодержитЗаписи(УсловиеПоискаЗаписи);
	
	ЗаписьСтатуса = ЮТЗапросы.Запись("РегистрСведений.инт_ТекущийСтатусРассылкиСообщений", УсловиеПоискаЗаписи);
	ЮТест.ОжидаетЧто(ЗаписьСтатуса, "Запись статуса")
	.Заполнено()
	.Свойство("СтатусСообщения").Заполнено().Равно(Статус);
	
КонецПроцедуры

Процедура ЗаписьОшибочногоСтатусаСообщения() Экспорт
	Мокито.Обучение(РегистрыСведений.инт_СообщенияКУдалению)
	.Когда("ЗарегистрироватьСообщениеКУдалению").Пропустить()
	.Прогон();
	
	ИдентификаторСообщения = Новый УникальныйИдентификатор;
	Подписчик = ГенераторТестовыхДанных.Подписчик();
	Статус = ГенераторТестовыхДанных.ОшибочныйСтатусРассылкиСообщений();
	Текст = ЮТест.Данные().СлучайнаяСтрока();
	
	Мокито.Обучение(РегистрыСведений.инт_СообщенияКУдалению)
	.Когда("ЗарегистрироватьСообщениеКУдалению").Пропустить()
	.Прогон();
	
	РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения,Подписчик, Перечисления.инт_СтатусыРассылкиИсходящихСообщений.Новый);
	РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Подписчик, Статус, Текст);
	
	УсловиеПоискаЗаписи = ЮТест.Предикат() // В базе есть записаный статус
	.Реквизит("Подписчик").Равно(Подписчик)
	.Реквизит("ИдентификаторСообщения").Равно(ИдентификаторСообщения);
	
	ЮТест.ОжидаетЧтоТаблицаБазы("РегистрСведений.инт_ТекущийСтатусРассылкиСообщений")
	.СодержитЗаписи(УсловиеПоискаЗаписи);
	
	ЗаписьСтатуса = ЮТЗапросы.Запись("РегистрСведений.инт_ТекущийСтатусРассылкиСообщений", УсловиеПоискаЗаписи);
	ЮТест.ОжидаетЧто(ЗаписьСтатуса, "Запись статуса")
	.Заполнено()
	.Свойство("СтатусСообщения").Заполнено().Равно(Статус)
	.Свойство("ТекстОшибки").Равно(Текст)
	.Свойство("КоличествоПопыток").Равно(1);
	
КонецПроцедуры

Процедура ПроверкаРаботыПопытокОтправки() Экспорт
	Мокито.Обучение(РегистрыСведений.инт_СообщенияКУдалению)
	.Когда("ЗарегистрироватьСообщениеКУдалению").Пропустить()
	.Прогон();
	
	ИдентификаторСообщения = Новый УникальныйИдентификатор;
	Подписчик = ГенераторТестовыхДанных.Подписчик();
	Статус = ГенераторТестовыхДанных.ОшибочныйСтатусРассылкиСообщений();
	Текст = ЮТест.Данные().СлучайнаяСтрока();
	РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения,Подписчик, Перечисления.инт_СтатусыРассылкиИсходящихСообщений.Новый);
	Для сч=1 По 2 Цикл
		РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Подписчик, Статус, Текст);
	КонецЦикла;
	
	УсловиеПоискаЗаписи = ЮТест.Предикат() // В базе есть записаный статус
	.Реквизит("Подписчик").Равно(Подписчик)
	.Реквизит("ИдентификаторСообщения").Равно(ИдентификаторСообщения);
	
	ЮТест.ОжидаетЧтоТаблицаБазы("РегистрСведений.инт_ТекущийСтатусРассылкиСообщений")
	.СодержитЗаписи(УсловиеПоискаЗаписи);
	
	ЗаписьСтатуса = ЮТЗапросы.Запись("РегистрСведений.инт_ТекущийСтатусРассылкиСообщений", УсловиеПоискаЗаписи);
	ЮТест.ОжидаетЧто(ЗаписьСтатуса, "Запись статуса")
	.Заполнено()
	.Свойство("СтатусСообщения").Заполнено().Равно(Статус)
	.Свойство("ТекстОшибки").Равно(Текст)
	.Свойство("КоличествоПопыток").Равно(2);
	
КонецПроцедуры

Процедура ЗаписьМассиваСообщений() Экспорт
	Мокито.Обучение(РегистрыСведений.инт_СообщенияКУдалению)
	.Когда("ЗарегистрироватьСообщениеКУдалению").Пропустить()
	.Прогон();
	
	МассивСообщений = Новый Массив;
	Для Сч=1 По 10 Цикл
		ИдентификаторСообщения = Новый УникальныйИдентификатор;
		Подписчик = ГенераторТестовыхДанных.Подписчик();
		МассивСообщений.Добавить(Новый Структура("ИдентификаторСообщения,Подписчик", ИдентификаторСообщения, Подписчик));
	КонецЦикла;
	
	Статус = Перечисления.инт_СтатусыРассылкиИсходящихСообщений.Новый;
	
	ЮТест.ОжидаетЧто(РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений)
	.Метод("ЗаписатьСтатусСообщений")
	.Параметр(МассивСообщений)
	.Параметр(Статус)
	.НеВыбрасываетИсключение();
	
	Для Каждого Сообщение Из МассивСообщений Цикл
		УсловиеПоискаЗаписи = ЮТест.Предикат() // В базе есть записаный статус
		.Реквизит("Подписчик").Равно(Сообщение.Подписчик)
		.Реквизит("ИдентификаторСообщения").Равно(Сообщение.ИдентификаторСообщения);
		
		ЮТест.ОжидаетЧтоТаблицаБазы("РегистрСведений.инт_ТекущийСтатусРассылкиСообщений")
		.СодержитЗаписи(УсловиеПоискаЗаписи);
		
		ЗаписьСтатуса = ЮТЗапросы.Запись("РегистрСведений.инт_ТекущийСтатусРассылкиСообщений", УсловиеПоискаЗаписи);
		ЮТест.ОжидаетЧто(ЗаписьСтатуса, "Запись статуса")
		.Заполнено()
		.Свойство("СтатусСообщения").Заполнено().Равно(Статус);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРаботуФункцииТекущийСтатусСообщения() Экспорт
	Мокито.Обучение(РегистрыСведений.инт_СообщенияКУдалению)
	.Когда("ЗарегистрироватьСообщениеКУдалению").Пропустить()
	.Прогон();
	
	ИдентификаторСообщения = Новый УникальныйИдентификатор;
	Подписчик = ГенераторТестовыхДанных.Подписчик();
	Статус = ГенераторТестовыхДанных.НеОшибочныйСтатусРассылкиСообщений();
	РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения,Подписчик, Перечисления.инт_СтатусыРассылкиИсходящихСообщений.Новый);
	РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Подписчик, Статус);
	
	ЮТест.ОжидаетЧто(РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ТекущийСтатусСообщения(ИдентификаторСообщения, Подписчик))
	.Равно(Статус);
	
	// Сменим Статус и проверим, что метод вернет новый статус.
	
	Статус = ГенераторТестовыхДанных.ОшибочныйСтатусРассылкиСообщений();
	РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Подписчик, Статус, ЮТест.Данные().СлучайнаяСтрока());
	
	ЮТест.ОжидаетЧто(РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ТекущийСтатусСообщения(ИдентификаторСообщения, Подписчик))
	.Равно(Статус);
	
КонецПроцедуры

Процедура ПроверитьПолучениеСообщенийКОтправке() Экспорт
	Мокито.Обучение(РегистрыСведений.инт_СообщенияКУдалению)
	.Когда("ЗарегистрироватьСообщениеКУдалению").Пропустить()
	.Прогон();
	
	ИдентификаторСообщения = Новый УникальныйИдентификатор;
	КоличествоПопытокОтправки = 2;
	Подписчик = ГенераторТестовыхДанных.Подписчик(,КоличествоПопытокОтправки);
	Текст = ЮТест.Данные().СлучайнаяСтрока();
	РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения,Подписчик, Перечисления.инт_СтатусыРассылкиИсходящихСообщений.Новый);
	Для Каждого Статус Из Перечисления.инт_СтатусыРассылкиИсходящихСообщений Цикл
		Если Статус = Перечисления.инт_СтатусыРассылкиИсходящихСообщений.Новый Тогда
			// Создадим запись и проверим, что она попадает в выборку.
			РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Подписчик, Статус);
			
			МассивСообщений = РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ПолучитьСообщенияКОтправке(0, Подписчик.ТипПодписчика);
			Нашли = Ложь;
			Для Каждого Сообщение Из МассивСообщений Цикл
				Нашли = Сообщение.ИдентификаторСообщения = ИдентификаторСообщения И Сообщение.Подписчик = Подписчик;
				Если Нашли Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ЮТест.ОжидаетЧто(Нашли).Равно(Истина);
		ИначеЕсли Перечисления.инт_СтатусыРассылкиИсходящихСообщений.ЭтоОшибочныйСтатус(Статус) Тогда
			// Если это ошибка, то генерируем записи циклом, он должен попадать пока количество попыток < чем КоличествоПопытокОтправки в подписчике, а потом второй раз, он попасть не должен
			Для сч = 1 По КоличествоПопытокОтправки Цикл
				РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Подписчик, Статус, Текст);
				
				МассивСообщений = РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ПолучитьСообщенияКОтправке(0, Подписчик.ТипПодписчика);
				Нашли = Ложь;
				Для Каждого Сообщение Из МассивСообщений Цикл
					Нашли = Сообщение.ИдентификаторСообщения = ИдентификаторСообщения И Сообщение.Подписчик = Подписчик;
					Если Нашли Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ДолжныНайти = сч<КоличествоПопытокОтправки;
				ЮТест.ОжидаетЧто(Нашли).Равно(ДолжныНайти);
			КонецЦикла;
			
		Иначе
			// сообщения в таком статусе попадать не должны 
			РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ЗаписатьСтатусСообщения(ИдентификаторСообщения, Подписчик, Статус);
			
			МассивСообщений = РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ПолучитьСообщенияКОтправке(0, Подписчик.ТипПодписчика);
			Нашли = Ложь;
			Для Каждого Сообщение Из МассивСообщений Цикл
				Нашли = Сообщение.ИдентификаторСообщения = ИдентификаторСообщения И Сообщение.Подписчик = Подписчик;
				Если Нашли Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ЮТест.ОжидаетЧто(Нашли).Равно(Ложь);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьРаботуПаузыМеждуОтправками() Экспорт
	Мокито.Обучение(РегистрыСведений.инт_СообщенияКУдалению)
	.Когда("ЗарегистрироватьСообщениеКУдалению").Пропустить()
	.Прогон();
	
	ИдентификаторСообщения = Новый УникальныйИдентификатор;
	КоличествоПопытокОтправки = 2;
	Статус = ГенераторТестовыхДанных.ОшибочныйСтатусРассылкиСообщений();
	Подписчик = ГенераторТестовыхДанных.Подписчик(,КоличествоПопытокОтправки, 10);
	Текст = ЮТест.Данные().СлучайнаяСтрока();
	
	Запись = РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.СоздатьМенеджерЗаписи();
	Запись.Подписчик = Подписчик;
	Запись.ИдентификаторСообщения = ИдентификаторСообщения;
	Запись.СтатусСообщения = Статус;
	Запись.ТекстОшибки = Текст;
	Запись.ДатаСледующейПопытки = Справочники.инт_Подписчики.РасчитатьДатуСледующейПопыткиПоДате(ТекущаяДатаСеанса(),Подписчик);
	Запись.Записать();
	
	МассивСообщений = РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ПолучитьСообщенияКОтправке(0, Подписчик.ТипПодписчика);
	Нашли = Ложь;
	Для Каждого Сообщение Из МассивСообщений Цикл
		Нашли = Сообщение.ИдентификаторСообщения = ИдентификаторСообщения И Сообщение.Подписчик = Подписчик;
		Если Нашли Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ДолжныНайти = Ложь;
	ЮТест.ОжидаетЧто(Нашли).Равно(ДолжныНайти);
	
	Запись.ДатаСледующейПопытки = ТекущаяДатаСеанса();
	Запись.Записать();
	
	МассивСообщений = РегистрыСведений.инт_ТекущийСтатусРассылкиСообщений.ПолучитьСообщенияКОтправке(0, Подписчик.ТипПодписчика);
	Нашли = Ложь;
	Для Каждого Сообщение Из МассивСообщений Цикл
		Нашли = Сообщение.ИдентификаторСообщения = ИдентификаторСообщения И Сообщение.Подписчик = Подписчик;
		Если Нашли Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ДолжныНайти = Истина;
	ЮТест.ОжидаетЧто(Нашли).Равно(ДолжныНайти);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
